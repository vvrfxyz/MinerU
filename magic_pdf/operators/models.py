import copy # 导入 copy 模块，用于对象拷贝，特别是深拷贝
import json # 导入 json 模块，用于 JSON 数据的序列化和反序列化
import os # 导入 os 模块，用于操作系统相关的功能，如路径操作、文件检查
from typing import Callable # 从 typing 模块导入 Callable 类型，用于类型注解，表示可调用对象（如函数）

# 从项目配置常量中导入 OCR 和 TXT 解析类型标识
from magic_pdf.config.constants import PARSE_TYPE_OCR, PARSE_TYPE_TXT
# 从项目配置枚举中导入支持的 PDF 解析方法
from magic_pdf.config.enums import SupportedPdfParseMethod
# 从项目数据处理模块导入 DataWriter 类，用于数据写入
from magic_pdf.data.data_reader_writer import DataWriter
# 从项目数据处理模块导入 Dataset 类，用于表示数据集
from magic_pdf.data.dataset import Dataset
# 从项目库中导入绘制边界框的函数
from magic_pdf.libs.draw_bbox import draw_model_bbox
# 从项目库中导入版本信息（注意：这里的 `**version**` 语法可能表示特定的版本处理方式）
from magic_pdf.libs.version import __version__
# 从项目操作符模块导入 PipeResult 类，用于封装管道处理结果
from magic_pdf.operators.pipes import PipeResult
# 从项目核心模块导入统一的 PDF 解析函数（v2 版本）
from magic_pdf.pdf_parse_union_core_v2 import pdf_parse_union
# 从项目操作符模块导入推理结果的基类
from magic_pdf.operators import InferenceResultBase


# 定义 InferenceResult 类，继承自 InferenceResultBase，用于封装和处理模型推理结果
class InferenceResult(InferenceResultBase):
    # 类的初始化方法
    def __init__(self, inference_results: list, dataset: Dataset):
        """Initialized method.
        Args:
            inference_results (list): the inference result generated by model # 模型生成的推理结果列表
            dataset (Dataset): the dataset related with model inference result # 与模型推理结果相关的数据集对象
        """
        # 将传入的推理结果列表存储在内部变量 _infer_res 中
        self._infer_res = inference_results
        # 将传入的数据集对象存储在内部变量 _dataset 中
        self._dataset = dataset

    # 定义绘制模型推理结果的方法
    def draw_model(self, file_path: str) -> None:
        """Draw model inference result.
        Args:
            file_path (str): the output file path # 输出文件的路径
        """
        # 获取目标文件路径的目录名
        dir_name = os.path.dirname(file_path)
        # 获取目标文件路径的文件名
        base_name = os.path.basename(file_path)
        # 检查输出目录是否存在
        if not os.path.exists(dir_name):
            # 如果目录不存在，则创建目录（exist_ok=True 避免目录已存在时报错）
            os.makedirs(dir_name, exist_ok=True)
        # 调用 draw_model_bbox 函数绘制边界框
        draw_model_bbox(
            # 传入推理结果的深拷贝，以防修改原始数据
            copy.deepcopy(self._infer_res),
            # 传入数据集对象
            self._dataset,
            # 传入输出目录
            dir_name,
            # 传入输出文件名
            base_name
        )

    # 定义将模型推理结果转储到文件的方法
    def dump_model(self, writer: DataWriter, file_path: str):
        """Dump model inference result to file.
        Args:
            writer (DataWriter): writer handle # 数据写入器句柄
            file_path (str): the location of target file # 目标文件的位置
        """
        # 使用传入的 writer 对象将字符串写入文件
        writer.write_string(
            # 写入的目标文件路径
            file_path,
            # 将推理结果序列化为格式化（indent=4）的 JSON 字符串
            # ensure_ascii=False 支持中文等非 ASCII 字符正确显示
            json.dumps(self._infer_res, ensure_ascii=False, indent=4)
        )

    # 定义获取模型推理结果的方法
    def get_infer_res(self):
        """Get the inference result.
        Returns:
            list: the inference result generated by model # 模型生成的推理结果列表
        """
        # 返回存储的推理结果列表
        return self._infer_res

    # 定义一个通用的方法，用于对推理结果应用一个可调用对象（函数）
    def apply(self, proc: Callable, *args, **kwargs):
        """Apply callable method which.
        Args:
            proc (Callable): invoke proc as follows: # 要调用的处理函数
                proc(inference_result, *args, **kwargs) # 函数调用签名
        Returns:
            Any: return the result generated by proc # 返回处理函数的执行结果
        """
        # 调用传入的 proc 函数，并将推理结果的深拷贝以及其他位置参数 (*args) 和关键字参数 (**kwargs) 传递给它
        # 使用深拷贝确保原始推理结果不被修改
        # 然后返回 proc 的执行结果
        return proc(copy.deepcopy(self._infer_res), *args, **kwargs)

    # 定义一个管道方法，用于以 TXT 模式（例如使用 PyMuPDF）处理模型推理结果并提取文本
    def pipe_txt_mode(
        self,
        imageWriter: DataWriter, # 图像写入器句柄，可能用于写入中间或调试图像
        start_page_id=0, # 开始处理的页面ID，默认为0（第一页）
        end_page_id=None, # 结束处理的页面ID，默认为None（最后一页）
        debug_mode=False, # 调试模式开关，默认为False
        lang=None, # 指定语言，默认为None
    ) -> PipeResult: # 返回 PipeResult 对象
        """Post-proc the model inference result, Extract the text using the
        third library, such as `pymupdf`
        Args:
            imageWriter (DataWriter): the image writer handle # 图像写入器句柄
            start_page_id (int, optional): Defaults to 0. Let user select some pages He/She want to process # 用户选择的起始页面ID，默认为0
            end_page_id (int, optional):  Defaults to the last page index of dataset. Let user select some pages He/She want to process # 用户选择的结束页面ID，默认为数据集的最后一页
            debug_mode (bool, optional): Defaults to False. will dump more log if enabled # 调试模式，若启用会输出更多日志，默认为False
            lang (str, optional): Defaults to None. # 语言选项，默认为None
        Returns:
            PipeResult: the result # 返回处理结果 PipeResult 对象
        """
        # 定义一个内部处理函数 proc，它将被 apply 方法调用
        def proc(*args, **kwargs) -> PipeResult:
            # 调用 pdf_parse_union 函数执行核心的 PDF 解析逻辑（TXT模式）
            # *args 和 **kwargs 会接收来自 apply 方法传递的参数，例如 _dataset, imageWriter, SupportedPdfParseMethod.TXT 等
            res = pdf_parse_union(*args, **kwargs)
            # 在结果字典中添加解析类型标记为 TXT
            res['_parse_type'] = PARSE_TYPE_TXT
            # 在结果字典中添加版本名称标记
            res['_version_name'] = __version__
            # 如果调用时传入了有效的 lang 参数
            if 'lang' in kwargs and kwargs['lang'] is not None:
                # 将语言信息添加到结果字典中
                res['lang'] = kwargs['lang']
            # 将处理结果 res 和原始数据集 _dataset 封装成 PipeResult 对象并返回
            return PipeResult(res, self._dataset)

        # 调用 apply 方法，执行上面定义的 proc 函数
        res = self.apply(
            proc, # 要执行的处理函数
            # 以下是传递给 proc 函数的 *args 参数
            self._dataset, # 数据集对象
            imageWriter, # 图像写入器
            SupportedPdfParseMethod.TXT, # 指定使用 TXT 解析方法
            # 以下是传递给 proc 函数的 **kwargs 参数
            start_page_id=start_page_id, # 起始页面ID
            end_page_id=end_page_id, # 结束页面ID
            debug_mode=debug_mode, # 调试模式
            lang=lang, # 语言
        )
        # 返回 apply 方法的执行结果（即 proc 返回的 PipeResult 对象）
        return res

    # 定义一个管道方法，用于以 OCR 模式处理模型推理结果并提取文本
    def pipe_ocr_mode(
        self,
        imageWriter: DataWriter, # 图像写入器句柄
        start_page_id=0, # 开始处理的页面ID，默认为0
        end_page_id=None, # 结束处理的页面ID，默认为None
        debug_mode=False, # 调试模式开关，默认为False
        lang=None, # 指定语言，对于OCR尤其重要，默认为None
    ) -> PipeResult: # 返回 PipeResult 对象
        """Post-proc the model inference result, Extract the text using `OCR`
        technical.
        Args:
            imageWriter (DataWriter): the image writer handle # 图像写入器句柄
            start_page_id (int, optional): Defaults to 0. Let user select some pages He/She want to process # 用户选择的起始页面ID，默认为0
            end_page_id (int, optional):  Defaults to the last page index of dataset. Let user select some pages He/She want to process # 用户选择的结束页面ID，默认为数据集的最后一页
            debug_mode (bool, optional): Defaults to False. will dump more log if enabled # 调试模式，若启用会输出更多日志，默认为False
            lang (str, optional): Defaults to None. # 语言选项，对OCR识别准确率有影响，默认为None
        Returns:
            PipeResult: the result # 返回处理结果 PipeResult 对象
        """
        # 定义一个内部处理函数 proc，它将被 apply 方法调用
        def proc(*args, **kwargs) -> PipeResult:
            # 调用 pdf_parse_union 函数执行核心的 PDF 解析逻辑（OCR模式）
            # *args 和 **kwargs 会接收来自 apply 方法传递的参数
            res = pdf_parse_union(*args, **kwargs)
            # 在结果字典中添加解析类型标记为 OCR
            res['_parse_type'] = PARSE_TYPE_OCR
            # 在结果字典中添加版本名称标记
            res['_version_name'] = __version__
            # 如果调用时传入了有效的 lang 参数
            if 'lang' in kwargs and kwargs['lang'] is not None:
                # 将语言信息添加到结果字典中
                res['lang'] = kwargs['lang']
            # 将处理结果 res 和原始数据集 _dataset 封装成 PipeResult 对象并返回
            return PipeResult(res, self._dataset)

        # 调用 apply 方法，执行上面定义的 proc 函数
        res = self.apply(
            proc, # 要执行的处理函数
            # 以下是传递给 proc 函数的 *args 参数
            self._dataset, # 数据集对象
            imageWriter, # 图像写入器
            SupportedPdfParseMethod.OCR, # 指定使用 OCR 解析方法
            # 以下是传递给 proc 函数的 **kwargs 参数
            start_page_id=start_page_id, # 起始页面ID
            end_page_id=end_page_id, # 结束页面ID
            debug_mode=debug_mode, # 调试模式
            lang=lang, # 语言
        )
        # 返回 apply 方法的执行结果（即 proc 返回的 PipeResult 对象）
        return res